#!/usr/bin/env node

/**
 * TESTE DE AUTENTICA√á√ÉO QUEENBOOKS
 * Script para testar login e busca com pre√ßos
 */

const QueenBooksAuthSearcher = require('./QueenBooksAuthSearcher.js');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function promptCredentials() {
  return new Promise((resolve) => {
    rl.question('üë§ Digite seu usu√°rio/email do QueenBooks: ', (username) => {
      rl.question('üîê Digite sua senha: ', (password) => {
        rl.close();
        resolve({ username, password });
      });
    });
  });
}

async function testarAutenticacao() {
  console.log('üîê TESTE DE AUTENTICA√á√ÉO QUEENBOOKS');
  console.log('=' .repeat(50));
  console.log('');

  try {
    // Solicitar credenciais
    const credentials = await promptCredentials();
    
    // Criar inst√¢ncia do searcher
    const searcher = new QueenBooksAuthSearcher(credentials);
    await searcher.init();
    
    console.log('');
    console.log('üöÄ Testando login...');
    
    // Tentar fazer login
    await searcher.login();
    
    console.log('‚úÖ Login realizado com sucesso!');
    console.log('');
    
    // Testar busca de produto com pre√ßo
    console.log('üîç Testando busca de produto com pre√ßos...');
    const produtoTeste = '177775811'; // ID do produto de teste
    
    const resultado = await searcher.buscarProdutoComPreco(produtoTeste);
    
    console.log('');
    console.log('üìä RESULTADO:');
    console.log('=' .repeat(50));
    
    if (resultado.encontrado) {
      console.log(`‚úÖ Produto encontrado: ${resultado.titulo}`);
      
      if (resultado.preco_autenticado) {
        console.log(`üí∞ Pre√ßo: R$ ${resultado.preco_autenticado.toFixed(2)}`);
        console.log('üéâ SUCESSO! Pre√ßos est√£o sendo extra√≠dos corretamente!');
      } else {
        console.log('‚ö†Ô∏è  Produto encontrado mas pre√ßo n√£o foi extra√≠do');
        console.log('üí° Isso pode indicar que o padr√£o de extra√ß√£o precisa ser ajustado');
      }
      
      console.log('');
      console.log('üìã Informa√ß√µes extra√≠das:');
      console.log(`   - ID: ${resultado.id}`);
      console.log(`   - T√≠tulo: ${resultado.titulo}`);
      console.log(`   - URL: ${resultado.urlProduto}`);
      
      if (resultado.informacoes && Object.keys(resultado.informacoes).length > 0) {
        console.log('   - Informa√ß√µes adicionais:');
        Object.entries(resultado.informacoes).forEach(([key, value]) => {
          console.log(`     * ${key}: ${value}`);
        });
      }
      
    } else {
      console.log('‚ùå Produto n√£o encontrado');
      if (resultado.erro) {
        console.log(`   Erro: ${resultado.erro}`);
      }
    }
    
  } catch (error) {
    console.log('');
    console.log('‚ùå ERRO NO TESTE:');
    console.log('=' .repeat(50));
    console.log(error.message);
    console.log('');
    console.log('üí° Poss√≠veis solu√ß√µes:');
    console.log('   1. Verifique se as credenciais est√£o corretas');
    console.log('   2. Verifique se voc√™ consegue fazer login manualmente no site');
    console.log('   3. O site pode ter prote√ß√£o anti-bot (CAPTCHA, etc.)');
    console.log('   4. Os padr√µes de extra√ß√£o podem precisar ser ajustados');
  }
  
  console.log('');
  console.log('üèÅ Teste finalizado!');
}

// Executar teste
testarAutenticacao();
